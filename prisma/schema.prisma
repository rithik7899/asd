// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POOLING_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  name         String
  email        String?
  category     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  examAttempts ExamAttempt[]
  ranks        Rank[]
  Answer       Answer[]
}

model Exam {
  id              String        @id @default(cuid())
  name            String
  examDate        String
  shiftTime       String
  negativeMarking Float
  positiveMarking Float
  ranks           Rank[]
  questions       Question[]
  examAttempts    ExamAttempt[]

  @@unique([examDate, shiftTime, name])
}

model Question {
  id             String   @id @default(cuid())
  examId         String
  questionId     String   @unique
  correctOption  String
  exam           Exam     @relation(fields: [examId], references: [id])
  studentAnswers Answer[]
}

model Rank {
  id           String @id @default(cuid())
  userId       String
  examId       String
  // zoneRank     Int
  categoryRank Int
  overallRank  Int
  user         User   @relation(fields: [userId], references: [id])
  exam         Exam   @relation(fields: [examId], references: [id])

  @@unique([userId, examId])
}

model Answer {
  id            String      @id @default(cuid())
  userId        String?
  questionId    String
  examAttemptId String
  chosenOption  String?
  isCorrect     Boolean?
  user          User?       @relation(fields: [userId], references: [id])
  question      Question    @relation(fields: [questionId], references: [questionId])
  ExamAttempt   ExamAttempt @relation(fields: [examAttemptId], references: [id])
}

model ExamAttempt {
  id          String   @id @default(cuid())
  userId      String?
  examId      String
  rollNumber  String   @unique
  // zone        String
  language    String
  category    String
  shiftTime   String
  attemptDate String
  user        User?    @relation(fields: [userId], references: [id])
  exam        Exam     @relation(fields: [examId], references: [id])
  answers     Answer[]
  totalMarks  Float

  @@unique([userId, examId])
}
